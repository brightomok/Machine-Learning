if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
fitmem
memdex
df[[8]]
summary(df[[8]])
df[[8]]
fitmem = NULL
for (i in length(usematrix)){
fitmem[i] <- summary(df[[i]])$adj.r.squared}
fitmem
lenght(usematrix)
length(usematrix)
dim(usematrix)
for (i in 1:256){
fitmem <- summary(df[[i]])$adj.r.squared}
fitmem
for (i in 1:256){
fitmem[i] <- summary(df[[i]])$adj.r.squared}
fitmem
max(fitmem)
for (i in 1:256){
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
fitmem
for (i in 1:256){
if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
fitmem
memdex
df[[memdex]]
summary(df[[memdex]])
summary(fitall)
paste(as.character(names(mpg)),as.character(names(am)))
as.character(mpg)
?as.string
class(mpg)
class("mpg")
bars <- function(outcome,regressor, others) {
if (class(outcome)=="character" && class(regressors)=="character"){
next}
else{stop}
#Removing mpg and am from regressor list since they are necessary for our purposes
regressors <- names(others)
#Generating a binary matrix for using each regressor or not in a grid matrix
usematrix <- expand.grid(rep(c(TRUE,FALSE), len(regressors))
Models <- apply(usematrix, 1, function(x) as.formula(paste(c(outcome, "~", regressors, regressors[x]), collapse=" + ")))
df <- apply(Models,lm,data =mtcars)
for (i in 1:256){
if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
bars <- function(outcome,regressor, others) {
if (class(outcome)=="character" && class(regressors)=="character"){
next}
else{stop}
#Removing mpg and am from regressor list since they are necessary for our purposes
regressors <- names(others)
#Generating a binary matrix for using each regressor or not in a grid matrix
usematrix <- expand.grid(rep(c(TRUE,FALSE), len(regressors))
Models <- apply(usematrix, 1, function(x) as.formula(paste(c(outcome, "~", regressors, regressors[x]), collapse=" + ")))
df <- lapply(Models,lm,data =mtcars)
for (i in 1:256){
if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
bars <- function(outcome,regressor, others) {
if (class(outcome)=="character" && class(regressors)=="character"){
next}
else{stop}
#Removing mpg and am from regressor list since they are necessary for our purposes
regressors <- names(others)
#Generating a binary matrix for using each regressor or not in a grid matrix
usematrix <- expand.grid(rep(c(TRUE,FALSE), len(regressors))
Models <- apply(usematrix, 1, function(x) as.formula(paste(c(outcome, " ~ ", regressors, regressors[x]), collapse=" + ")))
df <- lapply(Models,lm,data =mtcars)
for (i in 1:256){
if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
regressors <- names(mtcars)[c(2:8,10:11)]
usematrix <- expand.grid(c(TRUE,FALSE), c(TRUE,FALSE),
c(TRUE,FALSE), c(TRUE,FALSE),c(TRUE,FALSE), c(TRUE,FALSE),
c(TRUE,FALSE), c(TRUE,FALSE))
Models <- apply(usematrix, 1, function(x) as.formula(paste(c("mpg ~ am", regressors[x]), collapse=" + ")))
df <- lapply(Models,lm,data =mtcars)
for (i in 1:256){
if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
fitmem
memdex
paste(c(outcome, " ~ ", regressors, regressors[x]), collapse=" + "))
paste(c(outcome, " ~ ", regressors, regressors[x]), collapse=" + ")
paste(c(outcome, " ~ ", regressors, regressors[x]), collapse=" + ")))
paste(c(mpg, " ~ ", am, regressors[x]), collapse=" + ")))
paste(c(mpg, " ~ ", am, regressors[x]), collapse=" + "))
paste(c(mpg, " ~ ", am, regressors[x]), collapse=" + ")
paste(c("mpg", " ~ ", "am", regressors[x]), collapse=" + ")
paste(c(paste("mpg", " ~ ", "am"), regressors[x]), collapse=" + ")
bars <- function(outcome,regressor, others) {
if (class(outcome)=="character" && class(regressors)=="character"){
next}
else{stop}
#Removing mpg and am from regressor list since they are necessary for our purposes
regressors <- names(others)
#Generating a binary matrix for using each regressor or not in a grid matrix
usematrix <- expand.grid(rep(c(TRUE,FALSE), len(regressors))
Models <- apply(usematrix, 1, function(x) as.formula(paste(c(paste("mpg", " ~ ", "am"), regressors[x]), collapse=" + "))
df <- lapply(Models,lm,data =mtcars)
for (i in 1:256){
if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
paste(c(paste("mpg", " ~ ", "am"), regressors[x]), collapse=" + ")
bars("mpg","am",names(mtcars))
regressors <- names(mtcars)[c(2:8,10:11)]
usematrix <- expand.grid(c(TRUE,FALSE), c(TRUE,FALSE),
c(TRUE,FALSE), c(TRUE,FALSE),c(TRUE,FALSE), c(TRUE,FALSE),
c(TRUE,FALSE), c(TRUE,FALSE))
Models <- apply(usematrix, 1, function(x) as.formula(paste(c("mpg ~ am", regressors[x]), collapse=" + ")))
df <- lapply(Models,lm,data =mtcars)
for (i in 1:256){
if (summary(df[[i]])$adj.r.squared > fitmem) {
fitmem <- summary(df[[i]])$adj.r.squared
memdex <- i
}
fitmem
memdex
}
fitmem
memdex
summary(df[[memdex]])
names(summary(df[[memdex]]))
t.test(manual$mpg,auto$mpg,alternative = "less"))
names(t.test(manual$mpg,auto$mpg,alternative = "less")))
names(t.test(manual$mpg,auto$mpg,alternative = "less"))
?mtcars
class(df)
g2 <- ggplot(mtcars, aes(y=mpg,x=am)) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190)+geom_abline(slope = 2.52023, intercept = 12.30337)+geom_abline(slope = 7.245, intercept = 17.147)
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am)) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red")+geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 2, colour  = "blue"))+geom_abline(slope = 7.245, intercept = 17.147, lwd = 2, colour  = "green"))
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am)) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red") +g eom_abline(slope = 2.52023, intercept = 12.30337, lwd = 2, colour  = "blue")+geom_abline(slope = 7.245, intercept = 17.147, lwd = 2, colour  = "green"))
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am)) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red") +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 2, colour  = "blue")+geom_abline(slope = 7.245, intercept = 17.147, lwd = 2, colour  = "green"))
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am)) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red") +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 2, colour  = "blue")+geom_abline(slope = 7.245, intercept = 17.147, lwd = 2, colour  = "green")
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am)) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red") +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 1, colour  = "blue")+geom_abline(slope = 7.245, intercept = 17.147, lwd = 1, colour  = "green")
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am), show_guide=TRUE) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red") +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 1, colour  = "blue")+geom_abline(slope = 7.245, intercept = 17.147, lwd = 1, colour  = "green")
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am), show_guide=TRUE) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red", show_guide=TRUE) +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 1, colour  = "blue", show_guide=TRUE)+geom_abline(slope = 7.245, intercept = 17.147, lwd = 1, colour  = "green", show_guide=TRUE)
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am), show_guide=TRUE) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, aes(fill="red")) +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 1, aes(fill="green"))+geom_abline(slope = 7.245, intercept = 17.147, lwd = 1, aes(fill="blue"))
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am), show_guide=TRUE) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, aes(colour="red")) +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 1, aes(colour="green"))+geom_abline(slope = 7.245, intercept = 17.147, lwd = 1, aes(colour="blue"))
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am), show_guide=TRUE) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red", show_guide=TRUE) +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 1, colour  = "blue", show_guide=TRUE)+geom_abline(slope = 7.245, intercept = 17.147, lwd = 1, colour  = "green", show_guide=TRUE)
g2
g2 <- ggplot(mtcars, aes(y=mpg,x=am), show_guide=TRUE) + geom_boxplot(aes(fill=factor(am))) + annotate("text", x = .5, y = 10, label = c("p = .00068"))+ geom_jitter(width = 0.2)+ annotate("text", x = 0, y = 16.85, label = c("mean = 17.15"))+ annotate("text", x = 1, y = 24.39, label = c("mean = 24.39")) + annotate("text", x = .5, y = 11, label = c("Corr = .6")) + annotate("text", x = .5, y = 12, label = c("Beta = 7.23"))+geom_abline(slope = 3.47045, intercept = 14.36190, lwd = 3, colour  = "red") +geom_abline(slope = 2.52023, intercept = 12.30337, lwd = 1, colour  = "blue")+geom_abline(slope = 7.245, intercept = 17.147, lwd = 1, colour  = "green")
g2
pred1 <- predict(fit1)
pred1
var(pred1)
predall <- predict(fitall)
fitopt <- df[[memdex]]
predopt <- predict(fitopt)
var(predall)
var(predopt)
memdex
df[[memdex]]
summary(fitopt)
summary(fit1)
summary(fitopt)$p.value
names(summary(fitopt))
summary(fitopt)$coef
summary(fitopt)$coef[2,]
summary(fitopt)$adj.r.squared
paste(summary(df[[memdex]])$coef[2,],summary(df[[memdex]])$adj.r.squared)
cbind(summary(df[[memdex]])$coef[2,],summary(df[[memdex]])$adj.r.squared)
rbind(summary(df[[memdex]])$coef[2,],summary(df[[memdex]])$adj.r.squared)
?append
append(summary(df[[memdex]])$coef[2,],summary(df[[memdex]])$adj.r.squared)
final <- append(summary(df[[memdex]])$coef[2,],summary(df[[memdex]])$adj.r.squared)
names(f)
names(final)
names(final)[6]
names(final)[5]
names(final)[5] <- "Adj R^2"
names(final)
sumopt <- final
sumopt
names(summary(fitopt))
?append
names(mtcars)
collapse(names(mtcars))
paste(names(mtcars, collapse= " + "))
paste(names(mtcars), collapse= " + "))
paste(names(mtcars), collapse= " + ")
summary(final)
summary(df[[memdex]])
summary(fitall)$coef[2,]
summary(fitall)$coef
summary(fitall)$coef[9]
summary(fitall)$coef[9,]
summary(fit1)
b.median <- function(data, num) {
resamples <- lapply(1:num, function(i) sample(data, replace=T))
r.median <- sapply(resamples, median)
std.err <- sqrt(var(r.median))
list(std.err=std.err, resamples=resamples, medians=r.median)
}
predict(fitopt)
pred1 <- predict(fitopt)
b.median(pred1,10000)
medboot <- b.median(pred1,10000)
names(medboot)
head(medboot)
names(medboot)
mean(medboot(std.err))
mean(medboot$std.err)
mtcars
pair_loess <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
g <- ggpairs(mtcars, lower = list(continuous=pair_loess))
g
plot(fitopt)
?par
par(mfrow(4,4))
par(mfrow= c(4,4))
plot(fitopt)
par(mfrow= c(2,2))
plot(fitopt)
plot(fitall)
plot(fit1)
fit1
summary(fit1)
mtcars
mtcars
?mtcars
factor(am):wt
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
t.test(x,y)
lm(x,y)
lm(y~x)
summary(lm(y~x))
summary(lm(y~x))$coef[1]
summary(lm(y~x))$coef[4]
summary(lm(y~x))$coef[5]
summary(lm(y~x))$coef[3]
summary(lm(y~x))$coef[5]
summary(lm(y~x))$coef
summary(lm(y~x))$coef[7
]
resid(summary(lm(y~x)))
sd(resid(summary(lm(y~x))))
anova(lm(y~x))
summary(anova(lm(y~x)))
sum(resid(lm(y~x))^2)
sqrt(sum(resid(lm(y~x))^2))
sqrt(sum(resid(lm(y~x))^2)/7)
mean(mtcars$wt)
mean(mtcars$wt)+c(-1,1)*qt(.975)*sd(mtcars$wt)
mean(mtcars$wt)+c(-1,1)*qt(.975,30)*sd(mtcars$wt)
lm(mpg~wt,mtcars)
mean(mtcars$wt)
dat <- mean(mtcars$wt)
fit <- lm(mpg~wt,mtcars)
predict(fit,dat)
dat
pred <- predict(fit,dat)
mean(pred)
est <- mean(pred)
est+c(-1,1)*qt(.975,30)*sd(pred)
sd(pred)
qt(.975,30)
summary(fit)
dat
pred <- predict(fit,newdata = dat)
pred
predict(fit)
?predict
pred <- predict(fit,data.frame(dat)
)
pred <- predict(fit,data.frame(dat))
data.frame(dat)
data <- c(mean(mtcars$wt))
data.frame(data)
predict(fit, data.frame(wt = dat))
pred <- predict(fit, data.frame(wt = dat))
est <- predict(fit, data.frame(wt = dat))
est+c(-1,1)*qt(.975,30)
summary(fit)
est+c(-1,1)*qt(.975,30)*.5591
est+c(-1,1)*qt(.95,30)*.5591
summary(fit)$coef[4]
est+c(-1,1)*qt(.975,30)*summary(fit)$coef[4]
est+c(-1,1)*pt(.975,30)*summary(fit)$coef[4]
est+c(-1,1)*qt(.975,32)*summary(fit)$coef[4]
est+c(-1,1)*pt(.95,30)*summary(fit)$coef[4]
?qt
qt(.975,30)
fit <- lm(mpg~wt-1,mtcars)
est <- predict(fit, data.frame(wt = dat))
est+c(-1,1)*qt(.975,30)*summary(fit)$coef[4]
pred
est
summary(fit)
summary(fit)#coef[2]
summary(fit)$coef[2]
est+c(-1,1)*qt(.975,30)*summary(fit)$coef[2]
fit <- lm(mpg~wt,mtcars)
est <- predict(fit, data.frame(wt = dat))
est+c(-1,1)*qt(.975,30)*summary(fit)$coef[4]
est <- predict(fit, data.frame(wt = dat), interval = "confidence")
est
?mtcars
predict(fit, data.frame(wt = 3.0), interval = "prediction")
summary(fit)
fit <- lm(mpg~wt,mtcars)
summary(fit)
summary(fit)$coef[2]*2+c(-1,1)*qt(.975,30)*summary(fit)$coef[4]
summary(fit)$coef[2]*2+2*c(-1,1)*qt(.975,30)*summary(fit)$coef[4]
fit <- lm(mpg~I(wt*1000,mtcars)
)
fit <- lm(mpg~I(wt*1000),mtcars)
summary(fit)
fit <- lm(mpg~wt,mtcars)
fit2 <- lm(mpg~wt-1,mtcars)
summary(fit)$coef
summary(fit2)$coef
mtcars$wt-predict(fit)
sum(mtcars$wt-predict(fit))^2
predict(fit)
mtcars$wt
sum(mtcars$mpg-predict(fit))^2
sum(mtcars$mpg-predict(fit2))^2
predict(fit2)
sum(mtcars$mpg-predict(fit2)^2)
sum((mtcars$mpg-predict(fit2))^2)
sum((mtcars$mpg-predict(fit))^2)
sum((mtcars$mpg-predict(fit))^2)/sum((mtcars$mpg-predict(fit2))^2)
fit2 <- lm(mpg~wt-1,mtcars)
var(fit)/var(fit2)
var(fit)
anova(fit2)
fit2 <- lm(mpg ~wt -1,mtcars)
fit2 <- lm(mpg ~ wt - 1,mtcars)
anova(fit2)
anova(fit)
sum((predict(fit)-mtcars$mpg)^2)/sum((predict(fit)-mtcars$mpg)^2)
sum((predict(fit)-mtcars$mpg)^2)/sum((predict(fit2)-mtcars$mpg)^2)
sum((predict(fit2)-mtcars$mpg)^2)/sum((predict(fit)-mtcars$mpg)^2)
fit2 <- lm(mpg ~ 1,mtcars)
sum((predict(fit2)-mtcars$mpg)^2)/sum((predict(fit)-mtcars$mpg)^2)
sum((predict(fit)-mtcars$mpg)^2)/sum((predict(fit2)-mtcars$mpg)^2)
summary(fit2)
fit <- lm(mpg~wt,mtcars)
summary(fit)
1-0.7446
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))$coef[7]
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
knit_with_parameters('~/Documents/WD/Quiz/Regression/Quiz2.rmd')
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x*y)
x*y
xy
xy*
x*y
y*x
x
y
w*x
mean(w*x)
mean(x)
/mean(w)
mean(w*x)/mean(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y-1)
summary(lm(x~y-1))
summary(lm(y~x-1))
fit <- lm(mpg~wt,mtcars)
summary(fit)$coef
.5/1
.5/(1/.5)
.5*(1/.5)
1.5*.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
(x-mean(x))/sd(x)
summary(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
summary(lm(x~y))
cov(lm(x~y))
var(lm(x~y))
getwd()
setwd("git/Machine Learning")
getwe()
getwd()
100*.99
1000*.99
(99/100)/999
(99)/999
990+99
1089/10000
1089/9010
99/100+990/1000
sens <- .99
spec <- .99
prob <- 1/1000
n <- 10000
click <- sens*n*prob
click
9.9/(99+9.9)
n<- 100000
99/(99+999)
?prediction
?prob
n*prob*click
click <- sens*n*prob
n <- 1000000
click <- sens*n*prob
n*prob*click
click*sens
click <- n*prob
click*sens
TP <- click*sens
FN <- click-TP
FN
.99/(1-.99)
prevalence = 1/1000
clicked <- prevalence * n
TP <- sense * clicked
TP <- sens * clicked
TP <- sens * clicked
FN <- clicked - TP
FN
Notclicked <- n - clicked
TN <- spec * Notclicked
FP <- Notclicked * sens
PPV <- TP/ (TP+FP)
PPV
FP
options(digits = 10)
PPV
FP<- Notclicked-TN
Fp
FP
PPV <- TP/ (TP+FP)
PPV
TP
TP+FP
FP
install.packages("IDEAR")
